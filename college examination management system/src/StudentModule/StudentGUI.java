/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package StudentModule;

import LecturerModule.Exam;
import UserModule.MainMenu;
import UserModule.UpdateForm;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author dohah
 */
public class StudentGUI extends javax.swing.JFrame {

        
    
    DefaultListModel<String>createExamQuestions=new   DefaultListModel <>(); 
    DefaultListModel<String> examsModel = new DefaultListModel<>();
    DefaultListModel<String> modifyExamQuestions = new DefaultListModel<>();

    
    ArrayList< Exam > exams=new ArrayList<>();
    
   
    
    
    
  
    ArrayList<String> ques=new ArrayList<>();
    ArrayList<String> correct=new ArrayList<>();
    ArrayList<String> duration=new ArrayList<>();
    String CourseName;
    
    public StudentGUI(Student student) {
        initComponents();
        showquestion.setModel(createExamQuestions);
        examslist.setModel(examsModel);
        examslist1.setModel(examsModel);
        questionsList.setModel(modifyExamQuestions);

        helloMessege.setText("Hello, " + student.getName());
        
        addData();
    }    
        

        
        
//        try (Scanner examReader = new Scanner(new File("src\\exams.txt"))) {
//            while (examReader.hasNextLine()) {
//            String examLine = examReader.nextLine();
//            String[] exam = examLine.split(" "); // Split the line by spaces
//
//            String courseName = exam[0]; // First part is the course name
//            String duration = exam[1];   // Second part is the duration
//            
//            questions.clear();
//            correctAnswers.clear();
//
//        try(Scanner questionReader = new Scanner(new File("src\\questions.txt"))){
//            while(questionReader.hasNextLine()){
//                String questionLine = questionReader.nextLine();
//                String[] question = questionLine.split(" ");
//                
//                StringBuilder fullQuestion = new StringBuilder();
//                for (String part : question) {
//                    fullQuestion.append(part).append(" ");
//                }
//                questions.add(fullQuestion.toString().trim());
//            }
//        }
//        try(Scanner answerReader = new Scanner(new File("src\\correctAnswers.txt"))){
//            while(answerReader.hasNextLine()){
//                String answerLine = answerReader.nextLine();
//                String[] answer = answerLine.split(" ");
//                
//                StringBuilder fullAnswer = new StringBuilder();
//                for (String part : answer) {
//                    fullAnswer.append(part).append(" ");
//                }
//                correctAnswers.add(fullAnswer.toString().trim());
//               }
//
//            }
//       
//        
//
//
//
//             Add the parsed exam to the list
//            exams.add(new Exam(duration, questions, correctAnswers, courseName));
//            examsModel.addElement(courseName); // Populate the UI model
//                }
//            } catch (IOException e) {
//            System.out.println("File not found or error reading the file.");
//        }
//
//        
//   
//        
//    }

        
        
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void addData(){
        ArrayList<String> questions = new ArrayList<>();
        ArrayList<String> correctAnswers = new ArrayList<>();

        try (Scanner examReader = new Scanner(new File("src\\exams.txt"))) {
            while (examReader.hasNextLine()) {
                String examLine = examReader.nextLine();
                String[] exam = examLine.split(" "); // Split the line by spaces

                String courseName = exam[0]; // First part is the course name
                String duration = exam[1];   // Second part is the duration

                questions.clear();
                correctAnswers.clear();

                // Read questions from the questions.txt file
                try (Scanner questionReader = new Scanner(new File("src\\questions.txt"))) {
                    while (questionReader.hasNextLine()) {
                        String questionLine = questionReader.nextLine();
                        String[] question = questionLine.split(" "); // Split question into parts

                        // Combine parts to form the full question
                        StringBuilder fullQuestion = new StringBuilder();
                        for (int i = 1; i<question.length;i++) {
                            fullQuestion.append(question[i]).append(" ");
                        }
                        questions.add(fullQuestion.toString().trim());
                    }
                } catch (IOException e) {
                    System.out.println("Error reading questions file: " + e.getMessage());
                }

                // Read answers from the correctAnswers.txt file
                try (Scanner answerReader = new Scanner(new File("src\\correctAnswers.txt"))) {
                    while (answerReader.hasNextLine()) {
                        String answerLine = answerReader.nextLine();
                        String[] answer = answerLine.split(" "); // Split answer into parts

                        // Combine parts to form the full answer
                        StringBuilder fullAnswer = new StringBuilder();
                        for (int i = 1; i<answer.length;i++) {
                            fullAnswer.append(answer[i]).append(" ");
                        }
                        correctAnswers.add(fullAnswer.toString().trim());
                    }
                } catch (IOException e) {
                    System.out.println("Error reading answers file: " + e.getMessage());
                }

                // Ensure the number of questions matches the number of correct answers
                if (questions.size() == correctAnswers.size()) {
                    // Add the parsed exam to the list
                    exams.add(new Exam(duration, questions, correctAnswers, courseName));
                    examsModel.addElement(courseName); // Populate the UI model
                } else {
                    System.out.println("Error: Questions and answers do not match for exam: " + courseName);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading the exams file: " + e.getMessage());
        }
    }
    // </editor-fold>
    

    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void CorrectAnswerActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
       
   
    }                                             

    private void setdurationActionPerformed(java.awt.event.ActionEvent evt) {                                            
    
  
    }                                           

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {                                       
       /*
        question.addElement(setQuestion.getText());
        */
       Exam exam=new Exam(setduration.getText(),ques,correct,setCourseName.getText());
       exam.saveToFile();
       
       exams.add(exam);
       examsModel.addElement(setCourseName.getText());
       
       
       createExamQuestions.clear();
       ques.clear();
       correct.clear();
       
       setduration.setText("");
       setQuestion.setText("");
       CorrectAnswer.setText("");
       setCourseName.setText("");
       
       
       
       
       for(Exam Exam : exams){
           System.out.println(Exam.toString());
       }
 
       
    }                                      

    private void setQuestionActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        new UpdateForm().setVisible(true);
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        dispose();
        new MainMenu().setVisible(true);
    }                                        

    private void REMOVEquestionActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        try {  
        createExamQuestions.remove(showquestion.getSelectedIndex());
        ques.remove(showquestion.getSelectedIndex());
        correct.remove(showquestion.getSelectedIndex());
         
            
        } catch (Exception e) {
              
        }
      
    }                                              

    private void AddQuestionActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        ques.add(setQuestion.getText());
        correct.add(CorrectAnswer.getText());
        createExamQuestions.addElement(setQuestion.getText());
        
        setQuestion.setText("");
        CorrectAnswer.setText("");
          
    }                                           

    private void modifyDurationActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void modifyQuestionActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void modifyCorrectAnswerActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void examslistValueChanged(javax.swing.event.ListSelectionEvent evt) {                                       
        // TODO add your handling code here:
        
        String selectedExamName = examslist.getSelectedValue();
        
        if(selectedExamName != null){
            for(Exam exam : exams){
                if(exam.getCourseName().equals(selectedExamName)){
                    modifyExamQuestions.clear();
                    for(String question : exam.getQuestions()){
                        modifyExamQuestions.addElement(question);
                    }
                }
            }
        }
        
    }                                      

    private void questionsListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                           
        // TODO add your handling code here:
        String selectedExamName = examslist.getSelectedValue();
        
        for(Exam exam : exams){
                if(exam.getCourseName().equals(selectedExamName)){
                    modifyCourseName.setText(exam.getCourseName());
                    modifyDuration.setText(exam.getDuration());
                    
                    int selectedIndex = questionsList.getSelectedIndex();
                    modifyQuestion.setText(exam.getQuestions().get(selectedIndex));
                    modifyCorrectAnswer.setText(exam.getCorrectAnswers().get(selectedIndex));
                }
            }
        
        
//        modifyQuestion.setText(questionsList.getSelectedValue());
        
    }                                          

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        String selectedExamName = examslist.getSelectedValue();
    
    // Ensure an exam is selected
    if (selectedExamName != null && !selectedExamName.isEmpty()) {
        System.out.println("Exam selected: " + selectedExamName);  // Debugging line
        
        for (Exam exam : exams) {
            if (exam.getCourseName().equals(selectedExamName)) {
                System.out.println("Found matching exam: " + exam.getCourseName());  // Debugging line
                
                // Get the modified values from the UI components
                String newDuration = modifyDuration.getText();
                
                // Ensure that the question list is not empty before proceeding
                if (!ques.isEmpty() && !correct.isEmpty() && ques.size() == correct.size()) {
                    ArrayList<String> newQuestions = new ArrayList<>(ques);  // Use the modified list of questions
                    ArrayList<String> newCorrectAnswers = new ArrayList<>(correct);  // Use the modified list of correct answers

                    // Modify the exam
                    exam.modifyExam(newDuration, newQuestions, newCorrectAnswers);

                    // Update the UI with the modified exam
                    modifyExamQuestions.clear();
                    for (String question : exam.getQuestions()) {
                        modifyExamQuestions.addElement(question);
                    }

                    // Notify the user that the exam was successfully updated
                    JOptionPane.showMessageDialog(this, "Exam modified successfully!");
                } else {
                    // If the questions or correct answers are empty or mismatched
                    JOptionPane.showMessageDialog(this, "Questions or correct answers are invalid.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
            }
        }
    } else {
        // If no exam is selected, show an error message
        JOptionPane.showMessageDialog(this, "Please select an exam to modify.", "No Exam Selected", JOptionPane.WARNING_MESSAGE);
    }

        
    }                                            

    private void examslist1ValueChanged(javax.swing.event.ListSelectionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String value = examslist1.getSelectedValue();
        ArrayList<String> studenAnswers = new ArrayList<>();
        
        studenAnswers.add("Ahmed");
        
        studenAnswers.add("Cairo");
        for(Exam exam : exams){
            if(exam.getCourseName().equals(value)){
                jTextField11.setText(String.valueOf(exam.gradeExam(studenAnswers)));
            }
        }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentGUI(new Student("Doha", "doha1234")).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private java.awt.Button AddQuestion;
    private javax.swing.JTextField CorrectAnswer;
    private javax.swing.JTabbedPane ExamTabs;
    private java.awt.Button REMOVEquestion;
    private java.awt.Button Submit;
    private javax.swing.JPanel automaticGradingPanel;
    private javax.swing.JPanel createExamPanel;
    private javax.swing.JPanel examManagmentPanel;
    private javax.swing.JList<String> examslist;
    private javax.swing.JList<String> examslist1;
    private javax.swing.JLabel helloMessege;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JTextField modifyCorrectAnswer;
    private javax.swing.JTextField modifyCourseName;
    private javax.swing.JTextField modifyDuration;
    private javax.swing.JPanel modifyExamPanel;
    private javax.swing.JTextField modifyQuestion;
    private javax.swing.JList<String> questionsList;
    private javax.swing.JPanel reportingToolsPanel;
    private javax.swing.JTextField setCourseName;
    private javax.swing.JTextField setQuestion;
    private javax.swing.JTextField setduration;
    public javax.swing.JList<String> showquestion;
    private javax.swing.JButton submitButton;
    // End of variables declaration                   

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

